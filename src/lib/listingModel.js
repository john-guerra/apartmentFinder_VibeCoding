// Data model and validation utilities for apartment listings

/**
 * Apartment Listing Schema
 * {
 *   _id: ObjectId (auto-generated by MongoDB),
 *   title: String (required, 3-100 chars),
 *   description: String (required, 10-1000 chars),
 *   price: Number (required, positive),
 *   numberOfRooms: Number (required, 1-20),
 *   location: String (optional, address/area),
 *   photos: Array of Strings (photo URLs),
 *   createdAt: Date (auto-generated),
 *   updatedAt: Date (auto-updated)
 * }
 */

export const LISTING_CONSTRAINTS = {
  title: {
    minLength: 3,
    maxLength: 100,
    required: true,
  },
  description: {
    minLength: 10,
    maxLength: 1000,
    required: true,
  },
  price: {
    min: 0,
    max: 1000000,
    required: true,
  },
  numberOfRooms: {
    min: 1,
    max: 20,
    required: true,
  },
  location: {
    maxLength: 200,
    required: false,
  },
  photos: {
    maxCount: 10,
    required: false,
  },
};

/**
 * Validates a listing object
 * @param {Object} listing - The listing data to validate
 * @returns {Object} { isValid: boolean, errors: string[] }
 */
export function validateListing(listing) {
  const errors = [];

  // Title validation
  if (!listing.title || typeof listing.title !== "string") {
    errors.push("Title is required");
  } else if (listing.title.length < LISTING_CONSTRAINTS.title.minLength) {
    errors.push(`Title must be at least ${LISTING_CONSTRAINTS.title.minLength} characters`);
  } else if (listing.title.length > LISTING_CONSTRAINTS.title.maxLength) {
    errors.push(`Title must be no more than ${LISTING_CONSTRAINTS.title.maxLength} characters`);
  }

  // Description validation
  if (!listing.description || typeof listing.description !== "string") {
    errors.push("Description is required");
  } else if (listing.description.length < LISTING_CONSTRAINTS.description.minLength) {
    errors.push(
      `Description must be at least ${LISTING_CONSTRAINTS.description.minLength} characters`
    );
  } else if (listing.description.length > LISTING_CONSTRAINTS.description.maxLength) {
    errors.push(
      `Description must be no more than ${LISTING_CONSTRAINTS.description.maxLength} characters`
    );
  }

  // Price validation
  if (listing.price === undefined || listing.price === null) {
    errors.push("Price is required");
  } else {
    const price = Number(listing.price);
    if (isNaN(price)) {
      errors.push("Price must be a valid number");
    } else if (price < LISTING_CONSTRAINTS.price.min) {
      errors.push(`Price must be at least $${LISTING_CONSTRAINTS.price.min}`);
    } else if (price > LISTING_CONSTRAINTS.price.max) {
      errors.push(`Price must be no more than $${LISTING_CONSTRAINTS.price.max}`);
    }
  }

  // Number of rooms validation
  if (listing.numberOfRooms === undefined || listing.numberOfRooms === null) {
    errors.push("Number of rooms is required");
  } else {
    const rooms = Number(listing.numberOfRooms);
    if (!Number.isInteger(rooms)) {
      errors.push("Number of rooms must be a whole number");
    } else if (rooms < LISTING_CONSTRAINTS.numberOfRooms.min) {
      errors.push(`Number of rooms must be at least ${LISTING_CONSTRAINTS.numberOfRooms.min}`);
    } else if (rooms > LISTING_CONSTRAINTS.numberOfRooms.max) {
      errors.push(`Number of rooms must be no more than ${LISTING_CONSTRAINTS.numberOfRooms.max}`);
    }
  }

  // Location validation (optional)
  if (listing.location && typeof listing.location === "string") {
    if (listing.location.length > LISTING_CONSTRAINTS.location.maxLength) {
      errors.push(
        `Location must be no more than ${LISTING_CONSTRAINTS.location.maxLength} characters`
      );
    }
  }

  // Photos validation (optional)
  if (listing.photos) {
    if (!Array.isArray(listing.photos)) {
      errors.push("Photos must be an array");
    } else {
      if (listing.photos.length > LISTING_CONSTRAINTS.photos.maxCount) {
        errors.push(`Maximum ${LISTING_CONSTRAINTS.photos.maxCount} photos allowed`);
      }
      // Validate each photo URL (skip empty strings)
      listing.photos.forEach((photo, index) => {
        // Only validate non-empty photo URLs
        if (photo && photo.trim() !== "") {
          if (typeof photo !== "string") {
            errors.push(`Photo ${index + 1} must be a valid URL`);
          }
          // Could add more URL validation here if needed
        }
      });
    }
  }

  return {
    isValid: errors.length === 0,
    errors,
  };
}

/**
 * Sanitizes and prepares listing data for database insertion
 * @param {Object} rawListing - Raw form data
 * @returns {Object} Sanitized listing object
 */
export function sanitizeListing(rawListing) {
  const now = new Date();

  return {
    title: rawListing.title?.trim(),
    description: rawListing.description?.trim(),
    price: Number(rawListing.price),
    numberOfRooms: Number(rawListing.numberOfRooms),
    location: rawListing.location?.trim() || "",
    photos: Array.isArray(rawListing.photos)
      ? rawListing.photos.filter((url) => url && typeof url === "string" && url.trim() !== "")
      : [],
    createdAt: rawListing.createdAt || now,
    updatedAt: now,
  };
}
